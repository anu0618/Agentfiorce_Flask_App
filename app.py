# Code Generated by Sidekick is for learning and experimentation purposes only.

from flask import Flask, request, jsonify
import requests
import base64
import mimetypes
import re
from bs4 import BeautifulSoup
from urllib.parse import urlparse

app = Flask(__name__)

# SFMC credentials and URLs (replace with your actual values)
SFMC_AUTH_URL = "https://mc4by0xw84s11pznjgq1c45n7qr0.auth.marketingcloudapis.com/v2/token"
SFMC_CLIENT_ID = "hq0iqxyu94tthtxe4na6bdul"
SFMC_CLIENT_SECRET = "lm1W0i9n0peoDpeQsI27g8rZ"

def get_sfmc_access_token():
    payload = {
        "grant_type": "client_credentials",
        "client_id": SFMC_CLIENT_ID,
        "client_secret": SFMC_CLIENT_SECRET
    }
    try:
        response = requests.post(SFMC_AUTH_URL, json=payload)
        response.raise_for_status()
        return response.json().get("access_token")
    except Exception as e:
        print(f"Error getting SFMC token: {e}")
        return None

def is_image_url(url):
    """Check if a URL points to an image by extension or content-type."""
    image_extensions = ('.jpg', '.jpeg', '.png', '.gif', '.bmp', '.webp', '.svg')
    parsed = urlparse(url)
    if parsed.scheme in ('http', 'https') and url.lower().endswith(image_extensions):
        return True
    return False

def embed_image_url(url, sfmc_token=None):
    try:
        headers = {}
        # If the image URL is from SFMC, add Authorization header
        if "marketingcloudimages.com" in url or "contentbuilder.marketingcloudapis.com" in url:
            if not sfmc_token:
                sfmc_token = get_sfmc_access_token()
            if sfmc_token:
                headers["Authorization"] = f"Bearer {sfmc_token}"
        response = requests.get(url, headers=headers)
        response.raise_for_status()
        content_type = response.headers.get("Content-Type") or mimetypes.guess_type(url)[0] or "image/jpeg"
        if not content_type.startswith("image/"):
            # Not an image, don't embed
            return url
        encoded = base64.b64encode(response.content).decode("utf-8")
        return f"data:{content_type};base64,{encoded}"
    except Exception as e:
        print(f"Warning: Error embedding image {url}: {e}")
        return url  # fallback to original URL

def embed_images_in_html(html_content, sfmc_token=None):
    soup = BeautifulSoup(html_content, "html.parser")
    # Embed <img src="...">
    for img in soup.find_all("img", src=True):
        src = img["src"]
        if urlparse(src).scheme in ["http", "https"]:
            embedded = embed_image_url(src, sfmc_token)
            if embedded.startswith("data:image/"):
                img["src"] = embedded
    # Embed inline CSS background images: url(...)
    for tag in soup.find_all(style=True):
        style = tag["style"]
        urls = re.findall(r'url\(([^)]+)\)', style)
        for url in urls:
            url_clean = url.strip(' "\'')
            if urlparse(url_clean).scheme in ["http", "https"]:
                embedded = embed_image_url(url_clean, sfmc_token)
                if embedded.startswith("data:image/"):
                    style = style.replace(url, f'"{embedded}"')
        tag["style"] = style
    return str(soup)

def embed_images_in_string(s, sfmc_token=None):
    # If string is HTML with <img>, process as HTML
    if "<img" in s.lower() or "background-image" in s.lower():
        return embed_images_in_html(s, sfmc_token)
    # Otherwise, check if it's a direct image URL
    if s.startswith("http://") or s.startswith("https://"):
        if is_image_url(s):
            return embed_image_url(s, sfmc_token)
    return s

def recursive_embed_images(obj, sfmc_token=None):
    if isinstance(obj, dict):
        return {k: recursive_embed_images(v, sfmc_token) for k, v in obj.items()}
    elif isinstance(obj, list):
        return [recursive_embed_images(item, sfmc_token) for item in obj]
    elif isinstance(obj, str):
        return embed_images_in_string(obj, sfmc_token)
    else:
        return obj

@app.route("/", methods=["GET"])
def health_check():
    return "Flask app is running!", 200

@app.route("/embed-images", methods=["POST"])
def process_json():
    data = request.json
    if not data:
        return jsonify({"error": "No JSON provided"}), 400
    try:
        sfmc_token = get_sfmc_access_token()
        processed = recursive_embed_images(data, sfmc_token)
        return jsonify(processed)
    except Exception as e:
        return jsonify({"error": str(e)}), 500

if __name__ == "__main__":
    app.run(debug=True)
