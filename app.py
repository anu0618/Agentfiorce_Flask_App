# Code Generated by Sidekick is for learning and experimentation purposes only.
import requests
from bs4 import BeautifulSoup
import json
import io
from flask import Flask, request, jsonify

app = Flask(__name__)

# SFMC Auth (replace with your actual values and secure them in production)
SFMC_AUTH_URL = "https://mc4by0xw84s11pznjgq1c45n7qr0.auth.marketingcloudapis.com/v2/token"
SFMC_CLIENT_ID = "hq0iqxyu94tthtxe4na6bdul"
SFMC_CLIENT_SECRET = "lm1W0i9n0peoDpeQsI27g8rZ"

# SFDC Auth (from your details)
SFDC_AUTH_URL = "https://login.salesforce.com/services/oauth2/token"
SFDC_CLIENT_ID = "3MVG9yAAFCYW6OqVMndr0J6q7RtrivnXVfiY5fb69yf1jGDwRDuqr9bAByD0acpNn9Fba.GYHVL_.SzeJLjaX"
SFDC_CLIENT_SECRET = "C658FFB7DED48EF9C4A2E143874101CA896FF0ABE894FDDA386587B55930EEDE"
SFDC_USERNAME = "anushrroy@deloitte.com.agentforce"
SFDC_PASSWORD = "Anushree@2"
CONTENT_SPACE_FOLDER_ID = "0ZuKd0000012f9pKAA"  # Example, replace as needed

def get_sfmc_token():
    payload = {
        "grant_type": "client_credentials",
        "client_id": SFMC_CLIENT_ID,
        "client_secret": SFMC_CLIENT_SECRET
    }
    resp = requests.post(SFMC_AUTH_URL, json=payload)
    resp.raise_for_status()
    return resp.json()["access_token"]

def get_sfdc_token():
    payload = {
        "grant_type": "password",
        "client_id": SFDC_CLIENT_ID,
        "client_secret": SFDC_CLIENT_SECRET,
        "username": SFDC_USERNAME,
        "password": SFDC_PASSWORD
    }
    resp = requests.post(SFDC_AUTH_URL, data=payload)
    resp.raise_for_status()
    return resp.json()["access_token"], resp.json()["instance_url"]

def download_sfmc_image(image_url, sfmc_token):
    headers = {
        "Authorization": f"Bearer {sfmc_token}"
    }
    resp = requests.get(image_url, headers=headers)
    resp.raise_for_status()
    return resp.content

def upload_to_moc(image_name, image_bytes, access_token, instance_url):
    url = f"{instance_url}/services/data/v60.0/connect/cms/contents"
    headers = {
        "Authorization": f"Bearer {access_token}"
    }
    metadata = {
        "contentSpaceOrFolderId": CONTENT_SPACE_FOLDER_ID,
        "title": image_name,
        "contentType": "sfdc_cms__image",
        "contentBody": {
            "sfdc_cms:media": {
                "source": {
                    "type": "file"
                }
            }
        }
    }
    metadata_json = json.dumps(metadata)
    files = {
        'ManagedContentInputParam': ('', metadata_json, 'application/json; charset=UTF-8'),
        'contentData': (image_name, io.BytesIO(image_bytes), 'application/octet-stream')
    }
    resp = requests.post(url, headers=headers, files=files)
    resp.raise_for_status()
    cms_image_url = resp.json()["contentBody"]["sfdc_cms:media"]['url']
    return cms_image_url

def process_asset_json(asset_json):
    # Parse the JSON if it's a string
    if isinstance(asset_json, str):
        asset = json.loads(asset_json)
    else:
        asset = asset_json

    # Extract HTML content
    html_body = asset.get("views", {}).get("html", {}).get("content", "")
    if not html_body:
        return {"error": "No HTML content found in asset JSON."}

    soup = BeautifulSoup(html_body, 'html.parser')
    url_map = {}

    sfmc_token = get_sfmc_token()
    sfdc_token, sfdc_instance_url = get_sfdc_token()

    for img in soup.find_all('img'):
        old_url = img.get('src')
        if not old_url:
            continue
        image_name = old_url.split('/')[-1].split('?')[0]
        try:
            img_data = download_sfmc_image(old_url, sfmc_token)
            new_url = upload_to_moc(image_name, img_data, sfdc_token, sfdc_instance_url)
            url_map[old_url] = new_url
            img['src'] = new_url
        except Exception as e:
            print(f"Error processing image {old_url}: {e}")

    # Update the HTML in the asset JSON
    updated_html = str(soup)
    asset["views"]["html"]["content"] = updated_html

    return {"updated_json": asset, "url_map": url_map}

@app.route('/process_asset', methods=['POST'])
def process_asset():
    data = request.get_json()
    asset_json = data.get('asset_json')
    if not asset_json:
        return jsonify({"error": "Missing 'asset_json' in request"}), 400
    result = process_asset_json(asset_json)
    return jsonify(result)

if __name__ == "__main__":
    app.run(debug=True)
