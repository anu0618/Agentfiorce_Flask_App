# Code Generated by Sidekick is for learning and experimentation purposes only.

from flask import Flask, request, jsonify
import requests
import base64
from bs4 import BeautifulSoup
from urllib.parse import urlparse

app = Flask(__name__)

# SFMC credentials and URLs
SFMC_AUTH_URL = "https://mc4by0xw84s11pznjgq1c45n7qr0.auth.marketingcloudapis.com/v2/token"
SFMC_CLIENT_ID = "hq0iqxyu94tthtxe4na6bdul"
SFMC_CLIENT_SECRET = "lm1W0i9n0peoDpeQsI27g8rZ"

@app.route("/")
def home():
    return "Welcome to the Flask App!"

@app.route("/favicon.ico")
def favicon():
    return "", 204  # No Content

def encode_image_from_url(url):
    try:
        response = requests.get(url)
        response.raise_for_status()
        content_type = response.headers.get("Content-Type", "image/jpeg")
        encoded = base64.b64encode(response.content).decode("utf-8")
        return f"data:{content_type};base64,{encoded}"
    except Exception as e:
        print(f"Warning: Error embedding image {url}: {e}")
        return url  # fallback to original URL

def embed_images_in_html(html_content):
    soup = BeautifulSoup(html_content, "html.parser")
    for img in soup.find_all("img", src=True):
        src = img["src"]
        if urlparse(src).scheme in ["http", "https"]:
            embedded = encode_image_from_url(src)
            if embedded.startswith("data:image/"):
                img["src"] = embedded
    return str(soup)

@app.route("/embed-images", methods=["POST"])
def process_html():
    data = request.json
    html = data.get("html_content", "")
    if not html:
        return jsonify({"error": "Missing html_content"}), 400
    try:
        embedded_html = embed_images_in_html(html)
        return jsonify({"embedded_html": embedded_html})
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def get_sfmc_access_token():
    payload = {
        "grant_type": "client_credentials",
        "client_id": SFMC_CLIENT_ID,
        "client_secret": SFMC_CLIENT_SECRET
    }
    try:
        response = requests.post(SFMC_AUTH_URL, json=payload)
        response.raise_for_status()
        return response.json().get("access_token")
    except requests.exceptions.RequestException as e:
        print(f"Warning: Error obtaining SFMC access token: {e}")
        return None

@app.route("/sfmc-auth")
def sfmc_auth():
    access_token = get_sfmc_access_token()
    if access_token:
        return jsonify({"access_token": access_token})
    else:
        return jsonify({"error": "Failed to obtain access token"}), 500

if __name__ == "__main__":
    app.run(debug=True)
