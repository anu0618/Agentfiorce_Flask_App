# Code Generated by Sidekick is for learning and experimentation purposes only.
from flask import Flask, request, jsonify
import requests
import base64
from bs4 import BeautifulSoup
from urllib.parse import urlparse

app = Flask(__name__)

# SFMC credentials and URLs (replace with your actual values)
SFMC_AUTH_URL = "https://mc4by0xw84s11pznjgq1c45n7qr0.auth.marketingcloudapis.com/v2/token"
SFMC_CLIENT_ID = "hq0iqxyu94tthtxe4na6bdul"
SFMC_CLIENT_SECRET = "lm1W0i9n0peoDpeQsI27g8rZ"

def get_sfmc_access_token():
    payload = {
        "grant_type": "client_credentials",
        "client_id": SFMC_CLIENT_ID,
        "client_secret": SFMC_CLIENT_SECRET
    }
    try:
        response = requests.post(SFMC_AUTH_URL, json=payload)
        response.raise_for_status()
        return response.json().get("access_token")
    except Exception as e:
        print(f"Error getting SFMC token: {e}")
        return None

def encode_image_from_url(url, sfmc_token=None):
    try:
        headers = {}
        # If the image URL is from SFMC, add Authorization header
        if "marketingcloudimages.com" in url or "contentbuilder.marketingcloudapis.com" in url:
            if not sfmc_token:
                sfmc_token = get_sfmc_access_token()
            if sfmc_token:
                headers["Authorization"] = f"Bearer {sfmc_token}"
        response = requests.get(url, headers=headers)
        response.raise_for_status()
        content_type = response.headers.get("Content-Type", "image/jpeg")
        encoded = base64.b64encode(response.content).decode("utf-8")
        return f"data:{content_type};base64,{encoded}"
    except Exception as e:
        print(f"Warning: Error embedding image {url}: {e}")
        return url  # fallback to original URL

def embed_images_in_html(html_content, sfmc_token=None):
    soup = BeautifulSoup(html_content, "html.parser")
    for img in soup.find_all("img", src=True):
        src = img["src"]
        if urlparse(src).scheme in ["http", "https"]:
            embedded = encode_image_from_url(src, sfmc_token)
            if embedded.startswith("data:image/"):
                img["src"] = embedded
    return str(soup)

def recursive_embed_images(obj, sfmc_token=None):
    if isinstance(obj, dict):
        return {k: recursive_embed_images(v, sfmc_token) for k, v in obj.items()}
    elif isinstance(obj, list):
        return [recursive_embed_images(item, sfmc_token) for item in obj]
    elif isinstance(obj, str):
        # Only process if it looks like HTML with <img
        if "<img" in obj.lower():
            return embed_images_in_html(obj, sfmc_token)
        else:
            return obj
    else:
        return obj

@app.route("/embed-images", methods=["POST"])
def process_json():
    data = request.json
    if not data:
        return jsonify({"error": "No JSON provided"}), 400
    try:
        # Get SFMC token once and reuse for all image requests in this call
        sfmc_token = get_sfmc_access_token()
        processed = recursive_embed_images(data, sfmc_token)
        return jsonify(processed)
    except Exception as e:
        return jsonify({"error": str(e)}), 500

if __name__ == "__main__":
    app.run(debug=True)
